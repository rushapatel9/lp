//1bfs dfs
#include <iostream>
#include <vector>
#include <queue>
#include <chrono>
#include <omp.h>
using namespace std;
using namespace chrono;
class TreeNode {
public:
    int val;
    TreeNode *left, *right;
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};
// Function to create binary tree from level-order input
TreeNode* buildTree(const vector<int>& nodes) {
    if (nodes.empty() || nodes[0] == -1) return nullptr;

    TreeNode* root = new TreeNode(nodes[0]);
    queue<TreeNode*> q;
    q.push(root);

    int i = 1;
    while (i < nodes.size()) {
        TreeNode* current = q.front();
        q.pop();

        if (nodes[i] != -1) {
            current->left = new TreeNode(nodes[i]);
            q.push(current->left);
        }
        i++;

        if (i < nodes.size() && nodes[i] != -1) {
            current->right = new TreeNode(nodes[i]);
            q.push(current->right);
        }
        i++;
    }

    return root;
}
// Parallel BFS on the tree
void par_bfs(TreeNode* root) {
    if (!root) return;

    queue<TreeNode*> q;
    q.push(root);

    cout << "Parallel BFS: ";

    while (!q.empty()) {
        int level_size = q.size();

        vector<TreeNode*> level_nodes;

        // Extract nodes for this level
        for (int i = 0; i < level_size; i++) {
            TreeNode* node = q.front();
            q.pop();
            level_nodes.push_back(node);
        }
#pragma omp parallel for
        for (int i = 0; i < level_nodes.size(); i++) {
#pragma omp critical
            cout << level_nodes[i]->val << " -> ";

#pragma omp critical
            {
                if (level_nodes[i]->left) q.push(level_nodes[i]->left);
                if (level_nodes[i]->right) q.push(level_nodes[i]->right);
            }
        }
    }
    cout << endl;
}
// Parallel DFS using OpenMP sections
void par_dfs(TreeNode* root) {
    if (!root) return;

#pragma omp critical
    cout << root->val << " -> ";

#pragma omp parallel sections
    {
#pragma omp section
        if (root->left) par_dfs(root->left);

#pragma omp section
        if (root->right) par_dfs(root->right);
    }
}
int main() {
    // Construct a simple binary tree
    TreeNode* root = new TreeNode(1);
    root->left = new TreeNode(2);
    root->right = new TreeNode(3);
    root->left->left = new TreeNode(4);
    root->left->right = new TreeNode(5);
    root->right->left = new TreeNode(6);
    root->right->right = new TreeNode(7);
    /*int n;
    cout << "Enter number of nodes: ";
    cin >> n;

    vector<int> nodes(n);
    cout << "Enter node values in level-order (-1 for NULL):\n";
    for (int i = 0; i < n; i++) {
        cin >> nodes[i];
    }
    TreeNode* root = buildTree(nodes);
*/
    auto t1 = high_resolution_clock::now();
    par_bfs(root);
    auto t2 = high_resolution_clock::now();
    cout << "Execution time for Parallel BFS: " << duration_cast<microseconds>(t2 - t1).count() << " microseconds\n";

    auto t3 = high_resolution_clock::now();
    cout << "Parallel DFS: ";
    par_dfs(root);
    cout << endl;
    auto t4 = high_resolution_clock::now();
    cout << "Execution time for Parallel DFS: " << duration_cast<microseconds>(t4 - t3).count() << " microseconds\n";
    return 0;
}

//2 bubble and merge
#include <omp.h>
#include <iostream>
#include <string>
#include <chrono>
using namespace std::chrono;
using namespace std;

void displayArray(string, int[], int);
void bubbleSort(int[], int);
void mergeSort(int[], int, int);
void merge(int[], int, int, int, int);
void displayArray(string message, int nums[], int length)
{
    cout << "\t" << message << ": [";
    for (int i = 0; i < length; i++)
    {
        cout << nums[i] << ", ";
    }
    cout << "\b\b]" << endl;
}
void bubbleSort(int nums[], int length)
{
    for (int i = 0; i < length; i++)
    {
        int start = i % 2; // Start from 0 if `i` is even else start from 1.

#pragma omp parallel for
        for (int j = start; j < length - 1; j += 2)
        {
            if (nums[j] > nums[j + 1])
            {
                int temp = nums[j];
                nums[j] = nums[j + 1];
                nums[j + 1] = temp;
            }
        }
    }
}
void mergeSort(int nums[], int start, int end)
{
    if (start < end)
    {
        int mid = (start + end) / 2;

#pragma omp parallel sections num_threads(2)
        {
#pragma omp section
            mergeSort(nums, start, mid);
#pragma omp section
            mergeSort(nums, mid + 1, end);
        }
        merge(nums, start, mid, mid + 1, end);
    }
}
void merge(int nums[], int leftStart, int leftEnd, int rightStart, int rightEnd)
{
    int n = (rightEnd - leftStart) + 1; // Size of both the array
    int tempArray[n];                   // Create temporary array.
    int t = 0;                          // Index for temporary array.
    int l = leftStart;                  // Index for left array.
    int r = rightStart;                 // Index for right array.

    // Put the element from left and right array into tempArray in sorted order.
    while (l <= leftEnd && r <= rightEnd)
    {
        if (nums[l] <= nums[r])
            tempArray[t++] = nums[l++];
        else
            tempArray[t++] = nums[r++];
    }
    // If left array still has few elements yet to add, add them too.
    while (l <= leftEnd)
        tempArray[t++] = nums[l++];

    // If right array still has few elements yet to add, add them too.
    while (r <= rightEnd)
        tempArray[t++] = nums[r++];

    // Copy the elements from tempArray to nums.
    for (int t = 0; t < n; t++)
        nums[leftStart++] = tempArray[t];
}
int main()
{
    // Bubble Sort Example.
    int nums1[] = {4, 6, 2, 0, 7, 6, 1, 9, -3, -5};
    int length1 = sizeof(nums1) / sizeof(int);
    auto start_bubble = high_resolution_clock::now();
    
    cout << "Bubble Sort: " << endl;
    displayArray("Before ", nums1, length1);
    bubbleSort(nums1, length1);
    displayArray("After  ", nums1, length1);

    auto end_bubble = high_resolution_clock::now();
    auto duration_bubble = duration_cast<microseconds>(end_bubble - start_bubble);
    cout << "\nExecution time for Bubble Sort: " << duration_bubble.count() << " microseconds" << endl;

    int nums2[] = {3, 5, 1, -1, 6, 5, 0, 8, -2, -4};
    int length2 = sizeof(nums2) / sizeof(int);

    auto start_merge = high_resolution_clock::now();

    cout << "Merge Sort: " << endl;
    displayArray("Before ", nums2, length2);
    mergeSort(nums2, 0, length2 - 1); 
    displayArray("After  ", nums2, length2);

    auto end_merge = high_resolution_clock::now();
    auto duration_merge = duration_cast<microseconds>(end_bubble - start_bubble);
    cout << "\nExecution time for Merge Sort: " << duration_bubble.count() << " microseconds" << endl;
    return 0;
}

//3 min max
#include <omp.h>
#include <iostream>
#include <chrono>
#include <algorithm>
using namespace std;
using namespace std::chrono;
void performOperations(int nums[], int length) {
    int minValue = nums[0], maxValue = nums[0], sum = 0;

#pragma omp parallel for reduction(min : minValue) reduction(max : maxValue) reduction(+ : sum)
    for (int i = 0; i < length; i++) {
        minValue = min(minValue, nums[i]);
        maxValue = max(maxValue, nums[i]);
        sum += nums[i];
    }
    cout << "Min value: " << minValue << endl;
    cout << "Max value: " << maxValue << endl;
    cout << "Sum: " << sum << endl;
    cout << "Average: " << static_cast<float>(sum) / length << endl;
}
int main() {
    int length;
    cout << "Enter the number of elements: ";
    cin >> length;

    int* nums = new int[length];
    cout << "Enter " << length << " elements:\n";
    for (int i = 0; i < length; i++) {
        cin >> nums[i];
    }
    auto start = high_resolution_clock::now();
    cout << "\nNums: [";
    for (int i = 0; i < length; i++) 
        cout << nums[i] << (i < length - 1 ? ", " : "");
    cout << "]\n";
    performOperations(nums, length);
    auto stop = high_resolution_clock::now();
    cout << "\nExecution time: " << duration_cast<microseconds>(stop - start).count() << " microseconds\n";
    delete[] nums;
    return 0;
}
